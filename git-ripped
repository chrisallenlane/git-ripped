#!/usr/bin/env python

# todo: author the README
# todo: hack in some more exercises
# todo: finish the csv output option

from datetime import datetime
import json
import os.path
import random
import sys
import time


###############################################################################
## Configs
###############################################################################
#
# Optionally allow for color if termcolor is installed
#
# Missing? Run: `sudo pip install termcolor`, or whatever is comparable
# for your system
#
try:
    import termcolor
    color_available = True
except:
    color_available = False
    pass

# attempt to use an alternative config file, if specified
try:
    config_file_path = sys.argv[1]
except:
    config_file_path = os.path.expanduser("~") + "/.git-ripped.json"

# fail gracefully if the config file does not exist
if not os.path.isfile(config_file_path):
    sys.stderr.write("Error: The file '" + config_file_path + "' is not found or is not readable.\n")
    exit()

# load the JSON file
config_file = open(config_file_path)
config      = json.load(config_file)
config_file.close()


###############################################################################
## Main
###############################################################################
# randomly choose an exercise
exercise    = random.choice(config['exercises'])

# determine the base effort depending on whether randomization is configured
if config['random']:
    effort = random.randint(exercise['min'], exercise['max'])
else:
    effort = exercise['max']

# if adaptive...
if config['adaptive']:
    # attempt to read when the last exercise took place
    last_effort_file = '/tmp/git-ripped.last'
    if os.path.isfile(last_effort_file):
        # determine the time difference between now and when the last
        # effort occurred
        last_effort = float(open(last_effort_file, 'r').read())
        timedelta   = float(time.time()) - last_effort

        # calculate an effort modifier based on how long it has been
        # since the last exercise was performed
        modifier    = timedelta / (config['max_rest_time'] * 60)

        # multiply the modifer against the effort
        effort = int(effort * modifier)

        # keep the effort within the min / max bounds
        if   effort > exercise['max']: effort = exercise['max']
        elif effort < exercise['min']: effort = exercise['min']

# record when the last effort took place
text_file = open(last_effort_file, 'w')
text_file.write(str(float(time.time())))
text_file.close()


###############################################################################
## Logging
###############################################################################
# determine the next exercise
message = exercise['name'] + ' ' + str(effort) + ' ' + exercise['measurement']

# optionally log the exercise performed
logfile_path = config['logfile']
if config['logfile'] != False:
    # try to write to /tmp
    try:
        # parse out the file extension
        logfile   = open(logfile_path, 'a')
        extension = os.path.splitext(logfile_path)[1]

        # optionally output csv data
        if extension == 'csv':
            # this is going to get more complicated when you account for escaping and such...
            #logfile.write(datetime.now().strftime("%Y-%m-%d %H:%M:%S") + "," + exercise['name'] +"," "\n")
            logfile.write(datetime.now().strftime("%Y-%m-%d %H:%M:%S") + ": " + message + "\n")
        else:
            logfile.write(datetime.now().strftime("%Y-%m-%d %H:%M:%S") + ": " + message + "\n")

        logfile.close()

    except:
        sys.stderr.write("Error: could not write to /tmp\n")


###############################################################################
## StdOut
###############################################################################
# output the exercise to do
if not color_available or config['color'] == 'default':
    print "git-ripped: " + message
else:
    print termcolor.colored("git-ripped: " + message, config['color'])


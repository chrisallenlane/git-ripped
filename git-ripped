#!/usr/bin/env python

# todo: implement logging
# todo: implement different config files
# todo: author the README
# todo: hack in some more exercises

import json
import os.path
import random
import termcolor
import time

# fail gracefully if the config file does not exist
#config_file_path = os.path.expanduser("~") + "/.git-ripped.json"
config_file_path = "./git-ripped.json"
if not os.path.isfile(config_file_path):
    print 'The ~/.git-ripped.json file is not found.'
    exit()

# load the JSON file
config_file = open(config_file_path)
config      = json.load(config_file)
config_file.close()

# randomly choose an exercise
exercise    = random.choice(config['exercises'])

# determine the base effort depending on whether randomization is configured
if config['random']:
    effort = random.randint(exercise['min'], exercise['max'])
else:
    effort = exercise['max']

# if adaptive...
if config['adaptive']:
    # attempt to read when the last exercise took place
    last_effort_file = '/tmp/git-ripped.last'
    if os.path.isfile(last_effort_file):
        # determine the time difference between now and when the last
        # effort occurred
        last_effort = float(open(last_effort_file, 'r').read())
        timedelta   = float(time.time()) - last_effort

        # calculate an effort modifier based on how long it has been
        # since the last exercise was performed
        modifier    = timedelta / (config['max_rest_time'] * 60)

        # multiply the modifer against the effort
        effort = int(effort * modifier)

        # keep the effort within the min / max bounds
        if   effort > exercise['max']: effort = exercise['max']
        elif effort < exercise['min']: effort = exercise['min']

# record when the last effort took place
text_file = open(last_effort_file, 'w')
text_file.write(str(float(time.time())))
text_file.close()

# output the exercise to do
if config['color'] == 'default':
    print termcolor.colored("git-ripped: " + exercise['name'] + " " + str(effort) + " " + exercise['measurement'])
else:
    print termcolor.colored("git-ripped: " + exercise['name'] + " " + str(effort) + " " + exercise['measurement'], config['color'])
